# This script takes the concept map JSON files that are generated as part of the VRDR, BFDR, and VR Common IGs
# and creates output files with mapping dictionaries used for IJE <-> FHIR value set translation
#
# Usage: ruby tools/generate_concept_mappings.rb <path-to-concept-maps> > <path-to-source-file>
#
# If you need to generate the concept map JSON files, first install sushi (https://github.com/FHIR/sushi).
# Then, to generate the mapping file for VRDR, first checkout the VRDR IG
#
#     git clone https://github.com/HL7/vrdr.git
#     cd vrdr
#     sushi
#
# The concept maps JSON files will be built in vrdr/fsh-generated/resources/. To generate the mapping file,
# assuming the current directory is this scripts directory and the IG was checked out at the same directory
# level as this repository, run
#
#     ruby generate_concept_mappings.rb ../../vrdr/fsh-generated >! ../projects/VRDR/Mappings.cs
#
# To generate the mapping file for BFDR, first checkout the BFDR IG
#
#     git clone https://github.com/HL7/fhir-bfdr.git
#     cd fhir-bfdr
#     sushi
#
# The concept maps JSON files will be built in fhir-bfdr/fsh-generated/resources/. To generate the mapping
# file, assuming the current directory is this scripts directory and the IG was checked out at the same
# directory level as this repository, run
#
#     ruby generate_concept_mappings.rb ../../fhir-bfdr/fsh-generated >! ../projects/BFDR/Mappings.cs
#
# Then, to generate the mapping file for the common VitalRecord library, first checkout the VR Common IG
#
#     git clone https://github.com/HL7/vr-common-library.git
#     cd vrdr
#     sushi
#
# The concept maps JSON files will be built in vr-common-library/fsh-generated/resources/. To generate the
# mapping file, assuming the current directory is this scripts directory and the IG was checked out at the
# same directory level as this repository, run
#
#     ruby generate_concept_mappings.rb ../../vr-common-library/fsh-generated >! ../projects/VitalRecord/Mappings.cs

require 'json'
require 'erb'

path_to_concept_maps = ARGV.shift
raise "Please provide a path to concept maps as the first argument" unless path_to_concept_maps

# The namespace depends on the IG
namespace = case path_to_concept_maps
            when /vrdr/ then 'VRDR'
            when /bfdr/ then 'BFDR'
            when /common/ then 'VR'
            end

# Load the Concept Maps from the provided directory
concept_map_files = Dir.glob("#{path_to_concept_maps}/**/ConceptMap*.json")
raise "No Concept Maps Found" unless concept_map_files.size > 0

# Iterate through each file and populate a hash of <ConceptName> => Array of { ije: <IJECode>, fhir: <FHIRCode> }
concept_map_hash = Hash.new { |h, k| h[k] = [] }
concept_maps = concept_map_files.each do |concept_map_file|

  # Load and parse the JSON
  concept_map = JSON.parse(File.read(concept_map_file))

  # Grab the name, removing the leading ConceptMap or trailing CM or VitalRecords strings
  name = concept_map['id'].gsub(/^ConceptMap/, '').gsub(/CM$/, '').gsub(/VitalRecords$/, '')

  # Transform each map into a simpler representation of pairs of values
  concept_map['group'].each do |cmg|
    cmg['element'].each do |cme|
      ije_code = cme['code']
      fhir_code = cme['target'].first['code']
      next unless ije_code && fhir_code # Skip any that don't have both mappings
      concept_map_hash[name] << { ije: ije_code, fhir: fhir_code }
    end
  end
end

# Depending on which IG, we may have some cleanup to do removing some map elements
if path_to_concept_maps.match(/vrdr/)
  concept_map_hash['TransportationIncidentRole']&.reject! { |mapping| mapping[:ije] == 'blank' || mapping[:ije] == 'freetext' }
  concept_map_hash['CertifierTypes']&.reject! { |mapping| mapping[:ije] == 'freetext' }
end

# There is a special case where an expected concept map is missing, if using VRDR 3.0
# TODO: If and when the concept map is redefined in the IG remove this special case code
#if path_to_concept_maps.match(/vrdr/)
#  if concept_map_hash.key?('DeathPregnancyStatus') || concept_map_hash.key?('PregnancyStatus')
#    raise "Workaround for missing PregnancyStatus concept map is no longer needed"
#  end
#  concept_map_hash['DeathPregnancyStatus'] = [
#    { ije: '1', fhir: '1' },
#    { ije: '2', fhir: '2' },
#    { ije: '3', fhir: '3' },
#    { ije: '4', fhir: '4' },
#    { ije: '7', fhir: '7' },
#    { ije: '9', fhir: '9' },
#    { ije: '8', fhir: 'NA' }
#  ]
#end

# Create a template for the output file

template = <<-EOT
// DO NOT EDIT MANUALLY! This file was generated by the script "<%= scriptname %>"

using System;
using System.Collections.Generic;

namespace <%= namespace %>
{
    /// <summary>Mappings between IJE and FHIR value sets</summary>
    public static class Mappings
    {
<% concept_map_hash.each do |concept, mappings| -%>
        /// <summary>Mappings for <%= concept %></summary>
        public static class <%= concept %>
        {
            /// <summary>IJE -> FHIR Mapping for <%= concept %></summary>
            public readonly static Dictionary<string, string> IJEToFHIR = new Dictionary<string, string>
            {
<% mappings.each do |mapping| -%>
                { "<%= mapping[:ije] %>", "<%= mapping[:fhir] %>" },
<% end -%>
            };
            /// <summary>FHIR -> IJE Mapping for <%= concept %></summary>
            public readonly static Dictionary<string, string> FHIRToIJE = new Dictionary<string, string>
            {
<% mappings.each do |mapping| -%>
                { "<%= mapping[:fhir] %>", "<%= mapping[:ije] %>" },
<% end -%>
            };
        }
<% end -%>
    }
}
EOT

# Set up other variables that are used in the template above
scriptname = __FILE__

# Populate and print the template
puts ERB.new(template, trim_mode: '-').result(binding)
